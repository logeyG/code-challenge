{"version":3,"sources":["Table.js","App.js","reportWebVitals.js","index.js"],"names":["GlobalFilter","preGlobalFilteredRows","globalFilter","setGlobalFilter","count","length","React","useState","value","setValue","onChange","useAsyncDebounce","undefined","className","e","target","placeholder","DefaultColumnFilter","column","filterValue","preFilteredRows","setFilter","Table","columns","data","defaultColumn","useMemo","Filter","useTable","useGlobalFilter","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","state","map","headerGroup","getHeaderGroupProps","headers","getHeaderProps","render","row","i","getRowProps","cells","cell","getCellProps","Sections","values","section","idx","App","useEffect","a","axios","result","setData","results","Header","accessor","Cell","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1104506c.chunk.js","sourcesContent":["// Table.js\r\n\r\nimport React from \"react\";\r\nimport { useTable, useGlobalFilter, useAsyncDebounce } from \"react-table\";\r\nimport './table.css';\r\n\r\nfunction GlobalFilter({\r\n    preGlobalFilteredRows,\r\n    globalFilter,\r\n    setGlobalFilter,\r\n}) {\r\n    const count = preGlobalFilteredRows.length\r\n    const [value, setValue] = React.useState(globalFilter)\r\n    const onChange = useAsyncDebounce(value => {\r\n        setGlobalFilter(value || undefined)\r\n    }, 200)\r\n\r\n    return (\r\n        <input className=\"global-search\"\r\n            value={value || \"\"}\r\n            onChange={e => {\r\n                setValue(e.target.value);\r\n                onChange(e.target.value);\r\n            }}\r\n            placeholder={`Search ${count} articles...`}\r\n        />\r\n    )\r\n}\r\n\r\nfunction DefaultColumnFilter({\r\n    column: { filterValue, preFilteredRows, setFilter },\r\n}) {\r\n    const count = preFilteredRows.length\r\n\r\n    return (\r\n        <input\r\n            value={filterValue || ''}\r\n            onChange={e => {\r\n                setFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\r\n            }}\r\n            placeholder={`Search ${count} articles...`}\r\n        />\r\n    )\r\n}\r\n\r\nexport default function Table({ columns, data }) {\r\n\r\n    const defaultColumn = React.useMemo(\r\n        () => ({\r\n            Filter: DefaultColumnFilter,\r\n        }),\r\n        []\r\n    )\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        rows,\r\n        prepareRow,\r\n        state,\r\n        preGlobalFilteredRows,\r\n        setGlobalFilter\r\n    } = useTable(\r\n        {\r\n            columns,\r\n            data,\r\n            defaultColumn\r\n        },\r\n        useGlobalFilter\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <GlobalFilter\r\n                preGlobalFilteredRows={preGlobalFilteredRows}\r\n                globalFilter={state.globalFilter}\r\n                setGlobalFilter={setGlobalFilter}\r\n            />\r\n            <table {...getTableProps()}>\r\n                <thead>\r\n                    {headerGroups.map(headerGroup => (\r\n                        <tr {...headerGroup.getHeaderGroupProps()}>\r\n                            {headerGroup.headers.map(column => (\r\n                                <th {...column.getHeaderProps()}>{column.render(\"Header\")}</th>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </thead>\r\n                <tbody className=\"science-articles-table-body\" {...getTableBodyProps()}>\r\n                    {rows.map((row, i) => {\r\n                        prepareRow(row);\r\n                        return (\r\n                            <tr className=\"science-articles-table-row\" {...row.getRowProps()}>\r\n                                {row.cells.map(cell => {\r\n                                    return <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>;\r\n                                })}\r\n                            </tr>\r\n                        );\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        </>\r\n    );\r\n}","import './App.css';\nimport React, { useMemo, useState, useEffect } from \"react\";\nimport Table from \"./Table\";\nimport axios from \"axios\";\n\nconst Sections = ({ values }) => {\n  return (\n    <>\n      {[values].map((section, idx) => {\n        return (\n          <span key={idx} className=\"badge\">\n            {section}\n          </span>\n        );\n      })}\n    </>\n  );\n};\n\nfunction App() {\n\n  useEffect(() => {\n    (async () => {\n      const result = await axios(\"https://api.nytimes.com/svc/topstories/v2/science.json?api-key=Gwxln5M3geWlhR6UE0TY1FUWKSG3wCil\");\n      setData(result.data.results);\n    })();\n  }, []);\n\n  const [data, setData] = useState([]);\n\n  const columns = useMemo(\n    () => [\n      {\n        Header: \"NY Times Top Science Articles\",\n        columns: [\n          {\n            Header: \"Title\",\n            accessor: \"title\"\n          },\n          {\n            Header: \"Byline\",\n            accessor: \"byline\"\n          },\n          {\n            Header: \"Section\",\n            accessor: \"section\",\n            Cell: ({ cell: { value } }) => <Sections values={value} />\n          }\n        ]\n      }\n    ],\n    []\n  );\n\n  return (\n    <div className=\"App\">\n      <Table columns={columns} data={data} />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}